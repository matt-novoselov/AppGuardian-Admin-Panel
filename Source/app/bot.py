from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import ContentType
import app.firebase_adm as firebase_adm
from app.config import TELEGRAM_TOKEN, ADMIN_IDS


# Safely split the string, strip whitespace, and filter out any empty strings before converting to integers
admIDs = [int(x.strip()) for x in ADMIN_IDS.split(',') if x.strip().isdigit()]
admin_only = lambda message: message.from_user.id in admIDs

# Initialize bot and memory storage
storage = MemoryStorage()
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=storage)


# Run after /start command
@dp.message(CommandStart())
async def start_message(message: types.Message):
    if message.from_user.id in admIDs:
        await message.answer("‚òëÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞. "
                             "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    else:
        await message.answer("üö´ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")


# Run after /help command
@dp.message(admin_only, Command("help"))
async def help_message(message: types.Message):
    await message.answer(
        f"""
<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∏—Ö. –ü—Ä–∏–º–µ—Ä:</b>
<blockquote>A1A1A1
B2B2B2
C3C3C3</blockquote>

/list_all - <b>–≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã.</b>

/revoke - <b>–æ—Ç–æ–∑–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤. –ü—Ä–∏–º–µ—Ä:</b>
<blockquote>/revoke

A1A1A1
B2B2B2
C3C3C3</blockquote>

/revoke_all - <b>–æ—Ç–æ–∑–≤–∞—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã</b>
""",
        parse_mode="HTML")


# Run after /revoke command
@dp.message(admin_only, Command("revoke"))
async def revoke_player_id(message: types.Message, command: CommandObject):
    command_args: str = command.args
    if not command_args:
        await message.answer(
            f"""
/revoke - <b>–æ—Ç–æ–∑–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤. –ü—Ä–∏–º–µ—Ä:</b>
<blockquote>/revoke

A1A1A1
B2B2B2
C3C3C3</blockquote>
        """,
            parse_mode="HTML")
    else:
        # Split the command arguments by newlines to get individual IDs
        tokens = command_args.strip().split('\n')

        results = []  # To store the result for each ID

        # Iterate through all tokens
        for token in tokens:
            token = token.strip()  # Remove any leading or trailing whitespace

            # Check if token length is correct
            if len(token) == 6:
                result = firebase_adm.RevokeToken(token)
                results.append(result)
            elif len(token) != 0:
                results.append(f"üö´ –û—à–∏–±–∫–∞. Player ID `{token}` –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤")

        # Send the results back to the user
        await message.reply('\n\n'.join(results), parse_mode="Markdown")


class RevokeTokensState(StatesGroup):
    waiting_for_confirmation = State()


# Run after /revoke_all command
@dp.message(admin_only, Command("revoke_all"))
async def revoke_all_tokens(message: types.Message, state: FSMContext):
    amount = firebase_adm.CountTokens() # Get amount of tokens

    await message.answer(f"‚ö†Ô∏è *–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å {amount} —Ç–æ–∫–µ–Ω–æ–≤?*\n"
                         "\n"
                         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å:\n"
                         "\n"
                         f"`–î–∞, —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ö–æ—á—É –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ –æ—Ç–æ–∑–≤–∞—Ç—å –≤—Å–µ {amount} —Ç–æ–∫–µ–Ω–æ–≤`",
                         parse_mode="Markdown")
    await state.update_data(amount=amount)  # Save the amount to state data
    await state.set_state(RevokeTokensState.waiting_for_confirmation)


# Run after /list_all command
@dp.message(admin_only, Command("list_all"))  # Run after /list_all command
async def list_all(message: types.Message):
    await message.reply(firebase_adm.ListTokens(), parse_mode="HTML")


# Run after /cancel command
@dp.message(admin_only, Command("cancel"), RevokeTokensState.waiting_for_confirmation)
async def cancel_command_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()  # Check if there is an active state
    if current_state is not None:  # If a state is set
        await state.clear()  # Finish the state
        await message.answer("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–æ–∑–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
    else:
        await message.answer("‚ùì –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


# Confirmation before revoking all tokens
@dp.message(admin_only, RevokeTokensState.waiting_for_confirmation, F.content_type == ContentType.TEXT)
async def confirm_revoke_tokens(message: types.Message, state: FSMContext):
    # Get the amount from state data
    data = await state.get_data()
    amount = data.get('amount')

    # Check if the user provided the correct confirmation message
    expected_confirmation = f"–î–∞, —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ö–æ—á—É –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ –æ—Ç–æ–∑–≤–∞—Ç—å –≤—Å–µ {amount} —Ç–æ–∫–µ–Ω–æ–≤"

    # Check if confirmation matches
    if message.text == expected_confirmation:
        await firebase_adm.RevokeAllTokens()
        await state.clear()  # Finish the state
    else:
        await message.answer("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


# Run after receiving Token for authorization
@dp.message(admin_only, F.content_type == ContentType.TEXT)
async def player_id_handler(message: types.Message):
    tokens = message.text.strip().split('\n')  # Split the message by newlines to get individual IDs

    results = []  # To store the result for each ID

    # Iterate though all tokens
    for token in tokens:
        token = token.strip()  # Remove any leading or trailing whitespace

        # Check if token length is correct
        if len(token) == 6:
            result = firebase_adm.AuthorizeToken(token)
            results.append(result)
        elif len(token) != 0:
            results.append(f"üö´ –û—à–∏–±–∫–∞. Player ID `{token}` –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤")

    # Send the results back to the user
    await message.reply('\n\n'.join(results), parse_mode="Markdown")
